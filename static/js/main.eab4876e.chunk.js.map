{"version":3,"sources":["components/me.jpg","lillian.jpg","components/HomePage.js","components/Header.js","components/Footer.js","components/Projects.js","components/AboutMe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","className","src","logo","style","width","React","Component","navigation","Navbar","brand","Nav","NavLink","to","Header","Footer","Projects","AboutMe","App","name","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,gC,4ECA3CD,EAAOC,QAAU,IAA0B,qC,wOCa5BC,E,iLARP,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,SAAf,sBACA,yBAAKC,IAAKC,IAAMC,MAAO,CAACC,MAAO,KAAMJ,UAAU,iB,GALxCK,IAAMC,W,wBCCvBC,EACJ,kBAACC,EAAA,EAAD,CAAQR,UAAU,SAASS,MAAM,mBACjC,kBAACC,EAAA,EAAD,CAAKV,UAAU,cACb,kBAACW,EAAA,EAAD,CAASC,GAAG,KAAZ,QACA,kBAACD,EAAA,EAAD,CAASC,GAAG,YAAZ,SACA,kBAACD,EAAA,EAAD,CAASC,GAAG,aAAZ,cAWWC,E,iLALX,OACEN,M,GAHeF,IAAMC,WCOZQ,E,iLAPX,OANE,kBAACA,EAAD,CAAQd,UAAU,UAChB,2E,GAJaM,aCONS,E,iLAPX,OACI,gD,GAHeT,aCeRU,E,iLAbX,OACI,6BAEE,yCACA,qS,GANYV,aCiCPW,MApBf,WACI,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,OAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IAC7C,kBAAC,IAAD,CAAOmB,KAAK,SAASC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IAC/C,kBAAC,IAAD,CAAOI,KAAK,WAAWC,OAAK,EAACC,KAAK,YAAYC,UAAWN,IACzD,kBAAC,IAAD,CAAOG,KAAK,UAAUC,OAAK,EAACC,KAAK,WAAWC,UAAWL,QCd/CM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eab4876e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.789314a3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lillian.8c037dd6.jpg\";","import React, {Component} from 'react';\r\nimport logo from './me.jpg'\r\n\r\nclass HomePage extends React.Component{\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"title\">Lillian McClelland</div>\r\n                <img src={logo} style={{width: 650}} className=\"picture\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default HomePage;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Navbar, Nav, NavLink } from 'react-bootstrap';\r\n\r\nconst navigation = (\r\n  <Navbar className=\"navBar\" brand='React-Bootstrap'>\r\n  <Nav className=\"navContent\">\r\n    <NavLink to='/'>Home</NavLink>\r\n    <NavLink to='/AboutMe'>About</NavLink>\r\n    <NavLink to='/Projects'>Projects</NavLink>\r\n  </Nav>\r\n</Navbar>\r\n)\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      navigation\r\n    )\r\n  }\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    const footer = (\r\n      <Footer className=\"footer\">\r\n        <p>Contact: lillian.mcclelland@lc.cuny.edu</p>\r\n    \r\n      </Footer>\r\n    )\r\n\r\n    return (\r\n        footer\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\n\r\nclass Projects extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n          My projects\r\n        </div>\r\n    )\r\n  }\r\n}\r\nexport default Projects;","import React, { Component } from 'react';\r\n\r\nclass AboutMe extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n          \r\n          <header>About</header>\r\n          <p>I'm an upcoming programmer in the New York City area. Currently studying\r\n            for a Computer Sceince degree at Lehman College. I have experience with \r\n            Java, basic HTML and CSS, Javascript, and some React. Outside of that I'm \r\n            a very quiet and down to earth person.\r\n          </p>\r\n        </div>\r\n    )\r\n  }\r\n}\r\nexport default AboutMe;","import React from 'react';\r\nimport logo from './lillian.jpg';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport HomePage from './components/HomePage';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Projects from './components/Projects';\r\nimport AboutMe from './components/AboutMe';\r\n\r\nfunction App() {\r\n    return(\r\n      <Router>\r\n        <div>\r\n          <Header />\r\n          <Footer />\r\n          \r\n          <Switch>\r\n            <Route name=\"home\" exact path=\"/\" component={HomePage} />\r\n            <Route name=\"footer\" exact path=\"/\" component={Footer} />\r\n            <Route name=\"projects\" exact path=\"/Projects\" component={Projects} />\r\n            <Route name=\"aboutMe\" exact path=\"/AboutMe\" component={AboutMe} />\r\n          </Switch>\r\n          \r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './Header.css';\r\nimport './HomePage.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}